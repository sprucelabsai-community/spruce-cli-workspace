import path from 'path'
import pathUtil from 'path'
import { IFieldTemplateItem, ISchemaTemplateItem } from '@sprucelabs/schema'
import {
	IDefinitionBuilderTemplateItem,
	IValueTypes
} from '@sprucelabs/spruce-templates'
import { LATEST_HANDLEBARS } from '../constants'
import SpruceError from '../errors/SpruceError'
import versionUtil from '../utilities/version.utility'
import AbstractGenerator, { GenerationResults } from './AbstractGenerator'

export interface IGenerateSchemaTypesOptions {
	fieldTemplateItems: IFieldTemplateItem[]
	schemaTemplateItems: ISchemaTemplateItem[]
	clean?: boolean
}

export interface IGenerateFieldTypesOptions {
	fieldTemplateItems: IFieldTemplateItem[]
}

export interface IGenerateSchemaTypesOptions {
	fieldTemplateItems: IFieldTemplateItem[]
	schemaTemplateItems: ISchemaTemplateItem[]
	valueTypes: IValueTypes
}

export interface ISchemaTypesGenerationStage {
	name: string
	errors: SpruceError[]
	successfulSchemas: number
	successfulFields: number
}
export default class SchemaGenerator extends AbstractGenerator {
	private readonly fieldTemplates: {
		filename: string
		templateFuncName: 'fieldsTypes' | 'fieldClassMap' | 'fieldTypeEnum'
		description: string
	}[] = [
		{
			filename: 'fields.types.ts',
			templateFuncName: 'fieldsTypes',
			description:
				'All the interfaces generated for every type of schema field (text, number, address, etc)'
		},
		{
			filename: 'fieldClassMap.ts',
			templateFuncName: 'fieldClassMap',
			description:
				'An object that is injected into the FieldFactory and ensures 3rd party fields are integrated'
		},
		{
			filename: 'fieldTypeEnum.ts',
			templateFuncName: 'fieldTypeEnum',
			description:
				'This is your autogenerated, skill-specific enumeration of all the fields you have access to'
		}
	]

	public async generateBuilder(
		destinationDir: string,
		options: IDefinitionBuilderTemplateItem
	): Promise<GenerationResults> {
		const resolvedBuilderDestination = versionUtil.resolveNewLatestPath(
			destinationDir,
			LATEST_HANDLEBARS,
			`${options.nameCamel}.builder.ts`
		)

		const builderContent = this.templates.definitionBuilder(options)

		const results = this.writeFileIfChangedMixinResults(
			resolvedBuilderDestination,
			builderContent,
			'The file from which all types, interfaces, and protocols will be generated'
		)

		return results
	}

	public async generateFieldTypes(
		destinationDir: string,
		options: IGenerateFieldTypesOptions
	): Promise<GenerationResults> {
		const { fieldTemplateItems } = options

		let results: GenerationResults = []

		this.fieldTemplates.forEach(fileAndFunc => {
			const { filename, templateFuncName, description } = fileAndFunc

			const resolvedDestination = path.join(destinationDir, 'fields', filename)

			const contents = this.templates[templateFuncName]({
				fieldTemplateItems
			})

			results = this.writeFileIfChangedMixinResults(
				resolvedDestination,
				contents,
				description,
				results
			)
		})

		return results
	}

	public async generateSchemaTypes(
		destinationDir: string,
		options: IGenerateSchemaTypesOptions
	): Promise<GenerationResults> {
		const { fieldTemplateItems, schemaTemplateItems, valueTypes } = options
		const schemaTypesDestination = path.join(destinationDir, 'schemas.types.ts')

		let results: GenerationResults = []

		const schemaTypesContents = this.templates.schemasTypes({
			schemaTemplateItems,
			fieldTemplateItems,
			valueTypes
		})

		results = this.writeFileIfChangedMixinResults(
			schemaTypesDestination,
			schemaTypesContents,
			'The interfaces for every schema'
		)

		results = this.generateAllDefinitions(destinationDir, options)

		return results
	}

	private generateAllDefinitions(
		destinationDir: string,
		options: IGenerateSchemaTypesOptions
	): GenerationResults {
		const results: GenerationResults = []

		options.schemaTemplateItems.map(item => {
			results.push(
				...this.generateDefinition(destinationDir, { ...options, ...item })
			)
		})

		return results
	}

	public generateDefinition(
		destinationDir: string,
		options: {
			schemaTemplateItems: ISchemaTemplateItem[]
			fieldTemplateItems: IFieldTemplateItem[]
			valueTypes: IValueTypes
		} & ISchemaTemplateItem
	) {
		const {
			schemaTemplateItems,
			fieldTemplateItems,
			valueTypes,
			...item
		} = options

		const definitionContents = this.templates.definition({
			...item,
			schemaTemplateItems,
			fieldTemplateItems,
			valueTypes
		})

		const definitionDestination = path.join(
			destinationDir,
			`${item.id}.definition.ts`
		)

		return this.writeFileIfChangedMixinResults(
			definitionDestination,
			definitionContents,
			`The definition of ${item.nameReadable}`
		)
	}

	public async generateValueTypes(
		destinationDir: string,
		options: {
			schemaTemplateItems: ISchemaTemplateItem[]
			fieldTemplateItems: IFieldTemplateItem[]
		}
	): Promise<GenerationResults> {
		const contents = this.templates.valueTypes(options)
		const destination = pathUtil.join(destinationDir, 'valueType.tmp.ts')

		return this.writeFileIfChangedMixinResults(
			destination,
			contents,
			'For constructing what goes to the right of the : after each property in the interface.'
		)
	}
}
