import fs from 'fs'
import pathUtil from 'path'
import globby from 'globby'



const health: Record<string, any> = {
	skill: {
		status: 'passed',
	},
}

const schemaPath = pathUtil.join(
	__dirname,
	'..',
	'node_modules',
	'@sprucelabs/schema'
)

const isSchemaInstalled = fs.existsSync(schemaPath)

if (isSchemaInstalled) {
	health.schema = {
		status: 'passed',
	}
}

const eventsPath = pathUtil.join(
	__dirname,
	'events'
)

const doEventsExist = fs.existsSync(eventsPath)



if (doEventsExist) {

	let willBoot: (() => void) | undefined
	let didBoot: (() => void) | undefined

	health.event = {
		status: 'passed',
		listeners: []
	}

	
	const listenerMatches = globby.sync(`${eventsPath}/**/*.listener.[j|t]s`)
	const listeners: { eventName: string, eventNamespace: string, version: string }[] = []

	listenerMatches.forEach((match) => {
		const matchParts = match.split(pathUtil.sep)
		const fileName = matchParts.pop() as string

		const eventName = fileName.split('.')[0]
		const eventNamespace = matchParts.pop()
		const version = matchParts.pop()

		if (eventName && eventNamespace && version) {

			if (eventNamespace === 'skill' ) {
				if (eventName === 'will-boot') {
					willBoot = require(match).default
				} else if (eventName === 'did-boot') {
					didBoot = require(match).default
				}
			}

			listeners.push({
				eventName,
				eventNamespace,
				version
			})
		}

	})

	health.event.listeners = listeners

	if (willBoot) {
		willBoot()
	}

	if (didBoot) {
		didBoot()
	}

}


console.log('#####DIVIDER#####')
console.log(JSON.stringify(health))
console.log('#####DIVIDER#####')
