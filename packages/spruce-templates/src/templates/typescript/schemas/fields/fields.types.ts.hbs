import FieldType from './fieldTypeEnum'
import { IField } from '@sprucelabs/schema'

{{#each fieldTemplateItems}}
import { I{{namePascal}}Definition{{#if valueTypeMapper}}, {{{valueTypeMapper valueTypeMapper 'typeOnly'}}}{{/if}} } from '{{package}}'
{{/each}}


export type FieldDefinition = {{#each fieldTemplateItems}}| I{{namePascal}}Definition{{/each}}
export type Field = {{#each fieldTemplateItems}}| IField<I{{namePascal}}Definition>{{/each}}


/** Type for looking up field definitions by field type */
export interface IFieldDefinitionMap {
	{{#each fieldTemplateItems}}
	[FieldType.{{pascalType}}]: I{{namePascal}}Definition
	{{/each}}
}


/** Lookups used for dynamic type mapping based on a definition's field type */
export interface IFieldValueTypeGeneratorMap<F extends FieldDefinition, CreateEntityInstances extends boolean> {
	{{#each fieldTemplateItems}}
	[FieldType.{{pascalType}}]: {{#if valueTypeMapper}}{{{valueTypeMapper valueTypeMapper 'asGeneric'}}}{{else}}I{{namePascal}}Definition['value']{{/if}}
	{{/each}}
}

/** All field instances */
export interface IFieldMap {
	{{#each fieldTemplateItems}}
	[FieldType.{{pascalType}}]: IField<I{{namePascal}}Definition>
	{{/each}}
}

