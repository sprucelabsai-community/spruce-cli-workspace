{{#each autoloaders}}
import {{nameCamel}}Autoloader, { I{{namePascal}} } from './{{nameCamel}}'
{{#each imports}}
import {{defaultImport}}, { {{#each namedImports}}{{this}}{{/each}} } from '{{@key}}'
{{/each}}
{{/each}}

export interface IAutoloaderOptions {
	{{#each autoloaders}}
	{{nameCamel}}: {
		constructorOptions: I{{namePascalSingular}}Options
		{{#each imports}}
		after?: (instance: {{defaultImport}}) => Promise<void>
		{{/each}}
	}
	{{/each}}
}

export interface IAutoloaded {
	{{#each autoloaders}}
	{{nameCamel}}: I{{namePascal}}
	{{/each}}
}

export default async function autoloader(
	options: IAutoloaderOptions
): Promise<IAutoloaded> {
	{{#each autoloaders}}
	const {{nameCamel}} = await {{nameCamel}}Autoloader({
		constructorOptions: options.{{nameCamel}}.constructorOptions,
		after: options.{{nameCamel}}.after
	})
	{{/each}}

	const autoloaded = {
		{{#each autoloaders}}
		{{#if @last}}
		{{nameCamel}}
		{{else}}
		{{nameCamel}},
		{{/if}}
		{{/each}}
	}

	let keys
	{{#each autoloaders}}
	keys = Object.keys({{nameCamel}})
	for (let i = 0; i < keys.length; i += 1) {
		const f = keys[i]
		if (typeof {{nameCamel}}[f].afterAutoload === 'function') {
			await {{nameCamel}}[f].afterAutoload(autoloaded)
		}
	}
	{{/each}}

	return autoloaded
}
