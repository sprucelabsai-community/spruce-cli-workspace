{{#each autoloaders}}
import {{camelName}}Autoloader, { I{{pascalName}} } from './{{camelName}}'
{{#each imports}}
import {{defaultImport}}, { {{#each namedImports}}{{this}}{{/each}} } from '{{@key}}'
{{/each}}
{{/each}}

export interface IAutoloaderOptions {
	{{#each autoloaders}}
	{{camelName}}: {
		constructorOptions: I{{singularPascalName}}Options
		{{#each imports}}
		after?: (instance: {{defaultImport}}) => Promise<void>
		{{/each}}
	}
	{{/each}}
}

export interface IAutoloaded {
	{{#each autoloaders}}
	{{camelName}}: I{{pascalName}}
	{{/each}}
}

export default async function autoloader(
	options: IAutoloaderOptions
): Promise<IAutoloaded> {
	{{#each autoloaders}}
	const {{camelName}} = await {{camelName}}Autoloader({
		constructorOptions: options.{{camelName}}.constructorOptions,
		after: options.{{camelName}}.after
	})
	{{/each}}

	const autoloaded = {
		{{#each autoloaders}}
		{{#if @last}}
		{{camelName}}
		{{else}}
		{{camelName}},
		{{/if}}
		{{/each}}
	}

	let keys
	{{#each autoloaders}}
	keys = Object.keys({{camelName}})
	for (let i = 0; i < keys.length; i += 1) {
		const f = keys[i]
		if (typeof {{camelName}}[f].afterAutoload === 'function') {
			await {{camelName}}[f].afterAutoload(autoloaded)
		}
	}
	{{/each}}

	return autoloaded
}
