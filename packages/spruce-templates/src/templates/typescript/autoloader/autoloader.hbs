/* eslint-disable spruce/prefer-pascal-case-enums */
// Import necessary interface(s)
{{#each constructorOptionInterfaces}}
import { {{name}} } from '{{filePath}}'
{{/each}}
// Import each matching class that will be autoloaded
{{#each classes}}
import {{className}} from '{{relativeFilePath}}'
{{/each}}


export type {{namePascalPlural}} = {{#each classes}}{{#if @first}}{{className}}{{else}} | {{className}}{{/if}}{{/each}}

export interface I{{namePascalPlural}} {
	{{#each classes}}
	{{nameCamel}}: {{className}}
	{{/each}}
}

export enum {{namePascal}} {
	{{#each classes}}
	{{namePascal}} = '{{nameCamel}}',
	{{/each}}
}

export default async function autoloader<
	K extends {{namePascal}}[]
>(options: {
	constructorOptions: {{#each constructorOptionInterfaces}} {{#unless @first}}|{{/unless}} {{name}}{{/each}}
	after?: (instance: {{namePascalPlural}}) => Promise<void>
	only?: K
}): Promise<K extends undefined ? I{{namePascalPlural}} : Pick<I{{namePascalPlural}}, K[number]>> {
	const { constructorOptions, after, only } = options
	const siblings:Partial<I{{namePascalPlural}}> = {}

	{{#each classes}}
	if (!only || only.indexOf({{../namePascal}}.{{namePascal}}) > -1) {
		const {{nameCamel}}{{../namePascal}} = new {{className}}(constructorOptions)
		if (after) {
			await after({{nameCamel}}{{../namePascal}})
		}
		siblings.{{nameCamel}} = {{nameCamel}}{{../namePascal}}
	}
	{{/each}}

	return siblings as K extends undefined ? I{{namePascalPlural}} : Pick<I{{namePascalPlural}}, K[number]>
}
