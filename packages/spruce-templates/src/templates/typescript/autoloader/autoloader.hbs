/* eslint-disable spruce/prefer-pascal-case-enums */
// Import base class
import {{abstractClassNamePascal}} from '{{abstractClassRelativePath}}'
// Import each matching class that will be autoloaded
{{#each classes}}
import {{namePascal}} from '{{relativeFilePath}}'
{{/each}}

// Import necessary interface(s)
{{#each interfaces}}
import { {{interfaceName}} } from '{{relativeFilePath}}'
{{/each}}

export interface I{{namePlural}} {
	[{{nameCamel}}: string]: {{#each classes}}{{#if @first}}{{namePascal}}{{else}} | {{namePascal}}{{/if}}{{/each}}
	{{#each classes}}
	{{nameCamel}}: {{namePascal}}
	{{/each}}
}

export enum {{nameSingular}} {
	{{#each classes}}
	{{namePascal}} = '{{nameCamel}}',
	{{/each}}
}

export default async function autoloader(options: {
	constructorOptions: {{#each interfaces}}{{#if @first}}{{interfaceName}}{{else}} | {{interfaceName}}{{/if}}{{/each}}
	after?: (instance: {{abstractClassName}}) => Promise<void>
}): Promise<I{{namePlural}}> {
	const { constructorOptions, after } = options

	{{#each classes}}
	const {{nameCamel}} = new {{namePascal}}(constructorOptions)
	if (after) {
		await after({{nameCamel}})
	}
	{{/each}}

	const siblings: I{{namePlural}} = {
		{{#each classes}}
		{{#if @last}}
		{{nameCamel}}
		{{else}}
		{{nameCamel}},
		{{/if}}
		{{/each}}
	}

	{{#each classes}}
	// @ts-ignore method is optional
	if (typeof {{nameCamel}}.afterAutoload === 'function') {
		// @ts-ignore method is optional
		{{nameCamel}}.afterAutoload(siblings)
	}
	{{/each}}

	return siblings
}
