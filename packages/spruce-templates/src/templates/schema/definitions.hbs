import * as SpruceSchema from '@sprucelabs/schema'

{{! the definition partial, pass a schema and get back object that is the values and types }}
{{#* inline "schemaValues"}}
	{{#if dynamicKeySignature }}
    	/* {{dynamicKeySignature.label}}.{{#if dynamicKeySignature.hint}} {{dynamicKeySignature.hint}}{{/if}} */
    	[{{dynamicKeySignature.key}}:string]: string{{/if}}{{#if dynamicKeySignature.isArray}}[]{{/if}}
	{{#each fields}}
    	/* {{{label}}}.{{#if hint}} {{{hint}}}{{/if}} */
		'{{@key}}'{{#unless isRequired}}?{{/unless}}: {{fieldDefinitionValueType this }}
	{{/each}}
{{/inline}}

{{#* inline "fieldDefinition"}}
	label: '{{{escape label}}}',
	type: {{fieldTypeEnum this}},
	{{#if isRequired}}isRequired: true,{{/if}}
	{{#if hint}}hint: '{{{escape hint}}}',{{/if}}
	{{#if value}}value: {{{fieldValue this value}}},{{/if}}
	{{#if defaultValue}}defaultValue: {{{fieldValue this defaultValue}}},{{/if}}
	{{#if isArray}}isArray: true,{{/if}}
	{{#if description}}description: '{{{escape description}}}'{{/if}}
	options: {{{fieldDefinitionOptions this}}}
	
{{/inline}}

{{#* inline "schemaDefinition"}}
  id: '{{{escape id}}}',
  name: '{{{escape name}}}',
  description: '{{{escape description}}}',
  {{#if dynamicKeySignature}}dynamicKeySignature: { {{> fieldDefinition dynamicKeySignature}} }{{/if}}
  {{#if fields}}
  fields: {
  	{{#each fields}}
    	'{{@key}}': {
        	{{> fieldDefinition this}}
        },
    {{/each}}
  }
  {{/if}}
{{/inline}}


{{#each namespaces}}
	{{#each schemas}}
  	
	  	export namespace SpruceSchemas.{{../namespace}}.{{typeName}} {
			export const id = '{{{escape @key}}}'

			/* {{definition.description}} */
			export interface {{interfaceName}} {
				{{> schemaValues definition }}
			}

			/* the schema definition for a {{typeName}} */
			export const definition: SpruceSchemas.{{../namespace}}.{{typeName}}.{{interfaceName}}Definition = {
				{{> schemaDefinition definition }}
			}

			/* the interface for the schema definition for a {{typeName}} */
			export interface {{interfaceName}}Definition {
				{{> schemaDefinition definition }}
			}
		}
      
	{{/each}}
{{/each}}


